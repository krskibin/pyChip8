"""
Memory module
"""
MEMORY_SIZE = 4096
PROGRAM_COUNTER_START: int = 0x200

# Emulator variables


FONTSET = [
    0xF0, 0x90, 0x90, 0x90, 0xF0,  # 0
    0x20, 0x60, 0x20, 0x20, 0x70,  # 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0,  # 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0,  # 3
    0x90, 0x90, 0xF0, 0x10, 0x10,  # 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0,  # 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0,  # 6
    0xF0, 0x10, 0x20, 0x40, 0x40,  # 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0,  # 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0,  # 9
    0xF0, 0x90, 0xF0, 0x90, 0x90,  # A
    0xE0, 0x90, 0xE0, 0x90, 0xE0,  # B
    0xF0, 0x80, 0x80, 0x80, 0xF0,  # C
    0xE0, 0x90, 0x90, 0x90, 0xE0,  # D
    0xF0, 0x80, 0xF0, 0x80, 0xF0,  # E
    0xF0, 0x80, 0xF0, 0x80, 0x80,  # F
]

class Memory:
    def __init__(self):
        self.ram = bytearray(MEMORY_SIZE)
        self.load_fonts()

    def __str__(self):
        return f'RAM: {self.ram}'

    def load_fonts(self):
        for addr in range(len(FONTSET)):
            self.ram[addr] = FONTSET[addr]

    def load_rom(self, filename):
        with open(filename, 'rb') as file_stream:
            for index, value in enumerate(file_stream.read()):
                self.ram[PROGRAM_COUNTER_START + index] = value

    def clean_ram(self):
        self.ram = bytearray(MEMORY_SIZE)
        self.load_fonts()
